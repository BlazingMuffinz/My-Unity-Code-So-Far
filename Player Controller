using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class PlayerController : MonoBehaviour
{
    public float moveSpeed = 400f;
    public float jumpVelocity;
    public float lowJumpMult = 2f;
    public float fallMult = 2.5f;
    public float airResist = 0f;
    public float gravity = 9.81f;

    public BoxCollider2D boxCollider2D;
    public LayerMask groundLayer;

    public Rigidbody2D rb; 
    
    // Start is called before the first frame update
    void Start()
    {
        rb = GetComponent<Rigidbody2D>();
        boxCollider2D = GetComponent<BoxCollider2D>();
    }

    private bool isGrounded()
    {
        float extraHeightText = .3f;
        RaycastHit2D raycastHit = Physics2D.BoxCast(boxCollider2D.bounds.center, boxCollider2D.bounds.size, 0f, Vector2.down, extraHeightText, groundLayer);
        Color rayColor;
        if (raycastHit.collider != null)
        {
            rayColor = Color.green;
        }
        else
        {
            rayColor = Color.red;
        }
        Debug.DrawRay(boxCollider2D.bounds.center + new Vector3(boxCollider2D.bounds.extents.x, 0), Vector2.down * (boxCollider2D.bounds.extents.y + extraHeightText), rayColor);
        Debug.DrawRay(boxCollider2D.bounds.center - new Vector3(boxCollider2D.bounds.extents.x, 0), Vector2.down * (boxCollider2D.bounds.extents.y + extraHeightText), rayColor);
        Debug.DrawRay(boxCollider2D.bounds.center - new Vector3(boxCollider2D.bounds.extents.x, boxCollider2D.bounds.extents.y + extraHeightText), Vector2.right * (boxCollider2D.bounds.extents.x), rayColor);
        return raycastHit.collider != null;
    }

        // Update is called once per frame
        void Update()
    {
        if (Input.GetKey(KeyCode.RightArrow)) //moving right
        {
            if (isGrounded()) //when on the ground
            {
                rb.velocity = new Vector2(moveSpeed * Time.deltaTime, rb.velocity.y);
            }
            else if (isGrounded() == false) //while in the air
            {
                rb.velocity =  new Vector2 (moveSpeed * Time.deltaTime * airResist, rb.velocity.y);
            }
        }
        else if (Input.GetKey(KeyCode.LeftArrow)) //moving left
        {
            if (isGrounded()) //when grounded
            {
                rb.velocity = new Vector2(moveSpeed * Time.deltaTime * -1, rb.velocity.y);
            }
            else if (isGrounded() == false) //while in the air
            {
                rb.velocity = new Vector2(moveSpeed * Time.deltaTime * airResist * -1, rb.velocity.y);
            }
        }
        else
        {
            rb.velocity = new Vector2(0 * Time.deltaTime, rb.velocity.y);
        }

        if (Input.GetButtonDown("Jump") && isGrounded() == true) //jumping
        {
            rb.velocity = (Vector2.up * jumpVelocity);
        }

        if (rb.velocity.y < 0 && isGrounded() == false)
        {
            rb.velocity += Vector2.up * Physics2D.gravity.y * (fallMult - 1) * Time.deltaTime; //falling faster for weighty physics
        }
        else if (rb.velocity.y > 0 && !Input.GetButton("Jump") && isGrounded() == false)
        {
            rb.velocity += Vector2.up * Physics2D.gravity.y * (lowJumpMult - 1) * Time.deltaTime; //dynamic jump (when key is released gravity is increased)
        }
    }

}
