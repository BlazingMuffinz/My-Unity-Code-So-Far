using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class PlayerController : MonoBehaviour
{
    public float moveSpeed;
    public float jumpVelocity;
    public float lowJumpMult;
    public float fallMult;
    public float airResist;
    public float jumpTimer;
    private float jumpTimeCounter;
    public BoxCollider2D boxCollider2D;
    public LayerMask groundLayer;
    public Rigidbody2D rb;
 
    private bool onSlope;
    private bool isJumping;
    private bool facingRight;
    // Start is called before the first frame update
    void Start()
    {
        rb = GetComponent<Rigidbody2D>();
        onSlope = false;
        facingRight = true;
    }

    private void OnCollisionEnter2D(Collision2D collision)
    {
        if (collision.gameObject.tag == ("Slope"))
        {
            onSlope = true;
        }
       
    }

    public bool isGrounded()
    {
        float extraHeightText = .1f;
        RaycastHit2D raycastHit = Physics2D.BoxCast(boxCollider2D.bounds.center, boxCollider2D.bounds.size, 0f, Vector2.down, extraHeightText, groundLayer);
        Color rayColor;
        if (raycastHit.collider != null)
        {
            rayColor = Color.green;
        }
        else
        {
            rayColor = Color.red;
        }
        Debug.DrawRay(boxCollider2D.bounds.center + new Vector3(boxCollider2D.bounds.extents.x, 0), Vector2.down * (boxCollider2D.bounds.extents.y + extraHeightText), rayColor);
        Debug.DrawRay(boxCollider2D.bounds.center - new Vector3(boxCollider2D.bounds.extents.x, 0), Vector2.down * (boxCollider2D.bounds.extents.y + extraHeightText), rayColor);
        Debug.DrawRay(boxCollider2D.bounds.center - new Vector3(boxCollider2D.bounds.extents.x, boxCollider2D.bounds.extents.y + extraHeightText), Vector2.right * (boxCollider2D.bounds.extents.x), rayColor);
        return raycastHit.collider != null;
    }

    // Update is called once per frame
    void Update()
    {
        if (!facingRight)
        {
            transform.localRotation = Quaternion.Euler(0, 180, 0);
        }
        else
        {
            transform.localRotation = Quaternion.Euler(0, 0, 0);
        }


        if (Input.GetKey(KeyCode.RightArrow)) //moving right
        {
            if (isGrounded()) //when on the ground
            {
                rb.velocity = new Vector2(moveSpeed * Time.deltaTime, rb.velocity.y);
                rb.constraints = RigidbodyConstraints2D.FreezeRotation;
                facingRight = true;
            }
            else if (isGrounded() == false) //while in the air
            {
                rb.velocity = new Vector2(moveSpeed * Time.deltaTime * airResist, rb.velocity.y);
                rb.constraints = RigidbodyConstraints2D.FreezeRotation;
                facingRight = true;
            }
  
        }
        else if (Input.GetKey(KeyCode.LeftArrow)) //moving left
        {
            if (isGrounded()) //when grounded
            {
                rb.velocity = new Vector2(moveSpeed * Time.deltaTime * -1, rb.velocity.y);
                rb.constraints = RigidbodyConstraints2D.FreezeRotation;
                facingRight = false;

            }
            else if (isGrounded() == false) //while in the air
            {
                rb.velocity = new Vector2(moveSpeed * Time.deltaTime * airResist * -1, rb.velocity.y);
                rb.constraints = RigidbodyConstraints2D.FreezeRotation;
                facingRight = false;
            }

        }
        else
        {            
            rb.velocity = new Vector2(0 * Time.deltaTime, rb.velocity.y);
            rb.constraints = RigidbodyConstraints2D.FreezeRotation;
        }

        if (onSlope && isGrounded() && !Input.GetKey(KeyCode.RightArrow) & !Input.GetKey(KeyCode.LeftArrow) && !Input.GetButton("Jump")) //if on a slope, on the ground, not moving , and not jumping
        {
            rb.constraints = RigidbodyConstraints2D.FreezeRotation | RigidbodyConstraints2D.FreezePositionX | RigidbodyConstraints2D.FreezePositionY;
        }

        if (Input.GetButtonDown("Jump") && isGrounded() && !isJumping) //jumping
        {
            rb.velocity =  new Vector2(rb.velocity.x, jumpVelocity);
            jumpTimeCounter = jumpTimer;
            isJumping = true;
        }

        if (jumpTimeCounter > 0 && Input.GetButton("Jump") && isJumping == true)
        {
            jumpTimeCounter -= Time.deltaTime;
        }
        else if (jumpTimeCounter > 0 && !Input.GetButton("Jump") && isJumping == true)
        {
            rb.velocity += Vector2.up * Physics2D.gravity.y * (fallMult - 1) * Time.deltaTime;
        }
        else
        {
            rb.velocity += Vector2.up * Physics2D.gravity.y * (fallMult - 1) * Time.deltaTime;
        }

        if (rb.velocity.y < 0 && isGrounded() == false && isJumping)
        {
            rb.velocity += Vector2.up * Physics2D.gravity.y * (fallMult - 1) * Time.deltaTime; //falling faster for weighty physics

        }
        else if (rb.velocity.y > 0 && !Input.GetButton("Jump") && isGrounded() == false && isJumping == true)
        {
            rb.velocity += Vector2.up * Physics2D.gravity.y * (lowJumpMult - 1) * Time.deltaTime; //dynamic jump (when key is released gravity is increased)

        }

        if (!Input.GetButton("Jump") && isGrounded())
        {
            isJumping = false;
        }
    }

    private void FixedUpdate()
    { 
           
    }


}
