using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public enum playerState
{
    idle,
    walk,
    jump,
    falling,
    shoot,
    interact,
}


public class PlayerController : MonoBehaviour
{
    private float moveSpeed = 350;
    private float jumpVelocity = 25.3f;
    private float airResist = .9f;
    public BoxCollider2D boxCollider2D;
    public LayerMask groundLayer;
    public Rigidbody2D rb;
    public playerState thisPlayerState;
    private bool jumpedAlready;
    private bool facingRight;
    public Vector2 norm;
    // Start is called before the first frame update
    void Start()
    {
        rb = GetComponent<Rigidbody2D>();
        facingRight = true;
        jumpedAlready = false;
    }

    public bool isGrounded()
    {
        
        float extraHeightText = .1f;
        RaycastHit2D raycastHit = Physics2D.BoxCast(boxCollider2D.bounds.center, boxCollider2D.bounds.size, 0f, Vector2.down, extraHeightText, groundLayer);
        if (raycastHit.collider != null)
        {
            norm = raycastHit.normal;
            Debug.DrawRay(raycastHit.point, raycastHit.normal, Color.black);
        }
        /*Color rayColor;
        if (raycastHit.collider != null)
        {
            rayColor = Color.green;
        }
        else
        {
            rayColor = Color.red;
        }
        
        Debug.DrawRay(boxCollider2D.bounds.center + new Vector3(boxCollider2D.bounds.extents.x, 0), Vector2.down * (boxCollider2D.bounds.extents.y + extraHeightText), rayColor);
        Debug.DrawRay(boxCollider2D.bounds.center - new Vector3(boxCollider2D.bounds.extents.x, 0), Vector2.down * (boxCollider2D.bounds.extents.y + extraHeightText), rayColor);
        Debug.DrawRay(boxCollider2D.bounds.center - new Vector3(boxCollider2D.bounds.extents.x, boxCollider2D.bounds.extents.y + extraHeightText), Vector2.right * (boxCollider2D.bounds.extents.x), rayColor);*/
        return raycastHit.collider != null;
    }

    private void FixedUpdate()
    {
        if  (!isGrounded()) //if player is rising
        {
            rb.AddForce(Vector2.down * 45f);
        }
        else if (isGrounded()) //if player is on the ground
        {
            rb.AddForce(norm * -60f);
        }

 
       
    }

    // Update is called once per frame
    void Update()
    {

        if (!facingRight)
        {
            transform.localRotation = Quaternion.Euler(0, 180, 0);
        }
        else
        {
            transform.localRotation = Quaternion.Euler(0, 0, 0);
        }

        if (Input.GetKey(KeyCode.RightArrow)) //moving right
        {
            if (isGrounded()) //when on the ground
            {
                rb.velocity = new Vector2(moveSpeed * Time.deltaTime, rb.velocity.y);
                facingRight = true;
            }

            else if (isGrounded() == false) //while in the air
            {
                rb.velocity = new Vector2(moveSpeed * Time.deltaTime * airResist, rb.velocity.y);
                facingRight = true;
            }
            ChangeState(playerState.walk);
        }
        else if (Input.GetKey(KeyCode.LeftArrow)) //moving left
        {
            if (isGrounded()) //when grounded
            {
                rb.velocity = new Vector2(-1 * moveSpeed * Time.deltaTime, rb.velocity.y);
                facingRight = true;
            }
            else if (isGrounded() == false) //while in the air
            {
                rb.velocity = new Vector2(moveSpeed * Time.deltaTime * airResist * -1, rb.velocity.y);
                facingRight = false;
            }
            ChangeState(playerState.walk);
        }
        else
        {            
            rb.velocity = new Vector2(0 * Time.deltaTime, rb.velocity.y);
            ChangeState(playerState.idle);
        }
        
        if(Input.GetButton("Jump") && isGrounded() && !jumpedAlready)
        {
            rb.AddForce(Vector2.up * jumpVelocity, ForceMode2D.Impulse); //jump
            jumpedAlready = true;
        }
        else if (Input.GetButtonUp("Jump"))
        {
            jumpedAlready = false;
        }

        if (rb.velocity.y > 0 && !Input.GetButton("Jump")) //if they stopped pressing jump and they were jumping make the velocity 0
        {
            rb.velocity = new Vector2(rb.velocity.x, 0f);
        }

        if (rb.velocity.y > 0 && !isGrounded())
        {
            ChangeState(playerState.jump);
        }
        else if (rb.velocity.y < 0 && !isGrounded())
        {
            ChangeState(playerState.falling);
        }
    }

    public void ChangeState(playerState newState)
    {
        if (thisPlayerState != newState)
        {
            thisPlayerState = newState;
        }
    }


}
