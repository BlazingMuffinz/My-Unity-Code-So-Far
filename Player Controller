using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Templar : EnemyController
{
    public float groundRaycastDistance = 2;
    public float sightRadius = 10;
    public float patrolMaxTime;
    public float patrolTime;
    public float stopMaxTime;
    public float turnAroundTimer;

    private Rigidbody2D rb;

    public GameObject groundCheck;
    public GameObject sightObject;
    private GameObject target;
    public LayerMask groundLayers;
    public LayerMask playerLayer;
    public BoxCollider2D boxCollider2D;

    private bool facingRight;
    private bool calledFunction;
    private bool searchEnded;
    // Start is called before the first frame update
    void Start()
    {
        if (thisEnemyType == enemyType.awake) //if the enemy type is awake it is awake
        {
            ChangeState(enemyState.idle);
        }
        boxCollider2D = GetComponent<BoxCollider2D>();
        rb = GetComponent<Rigidbody2D>();
        target = GameObject.FindGameObjectWithTag("Player");
        calledFunction = false;
        facingRight = true;
    }

    private bool platformInFront() //if raycast detects the ground in front of the enemy
    {
        RaycastHit2D hit = Physics2D.Raycast(groundCheck.transform.position, Vector2.down, groundRaycastDistance, groundLayers);
        if (hit.collider != null)
        {
            Debug.DrawRay(groundCheck.transform.position, Vector2.down * groundRaycastDistance, Color.green);
        }
        else
        {
            Debug.DrawRay(groundCheck.transform.position, Vector2.down * groundRaycastDistance, Color.red);
        }
        return hit.collider != null;
    }
    
    private bool FoundPlayer()
    {
        Collider2D collider = Physics2D.OverlapBox(sightObject.transform.position, new Vector2 (10,4), 0f, playerLayer);
        return collider != null;
    }

    // Update is called once per frame
    void Update()
    {
        if (health <= 0)
        {
            Die();
        }
    }

    void FixedUpdate()
    {
        rb.AddForce(Vector2.down * 45f); //if later they need to detect the ground it can be adapted

        if (!facingRight) //facing right rotation stuff
        {
            transform.localRotation = Quaternion.Euler(0, 180, 0);
        }
        else
        {
            transform.localRotation = Quaternion.Euler(0, 0, 0);
        }

        if (!platformInFront() && !calledFunction) // if it doesn't detect a platform
        {
            StartCoroutine(TurnAround());
        }

        if (!FoundPlayer())
        {
            if (platformInFront() && facingRight)
            {
                
            }
            else if (platformInFront() && !facingRight)
            {
                
            }
        }
        else if (FoundPlayer())
        {
            
        }
    }

    void Attack()
    {
        if (FoundPlayer())
        {
            calledFunction = true;
            ChangeState(enemyState.attacking);
            calledFunction = false;
        }
    }

    private IEnumerator TurnAround()
    {
        calledFunction = true;
        ChangeState(enemyState.turning);
        yield return new WaitForSeconds(turnAroundTimer);
        if (facingRight)
        {
            facingRight = false;
        }
        else if (!facingRight)
        {
            facingRight = true;
        }
        calledFunction = false;
    }
    

    private void OnDrawGizmos()
    {
        Gizmos.color = Color.red;
        Gizmos.DrawWireCube(sightObject.transform.position, new Vector2 (10,4));
    }
}
